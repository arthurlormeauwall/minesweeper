{"version":3,"sources":["app/controllers/computeEmptyCellNetwork.js","app/controllers/GridController.js","ressources/images/cellHidden.jpg","ressources/images/cell1.jpg","ressources/images/cell2.jpg","ressources/images/cell3.jpg","ressources/images/cell4.jpg","ressources/images/cell5.jpg","ressources/images/cell6.jpg","ressources/images/cell7.jpg","ressources/images/cell8.jpg","ressources/images/cellFlag.jpg","ressources/images/wrongFlag.jpg","ressources/images/cellEmpty.jpg","ressources/images/bomb.jpg","ressources/images/bombGO.jpg","ressources/images/bombExplode.jpg","app/entities/display.js","ressources/images/bombFound.jpg","ressources/images/cell1GO.jpg","ressources/images/cell2GO.jpg","ressources/images/cell3GO.jpg","ressources/images/cell4GO.jpg","ressources/images/cell5GO.jpg","ressources/images/cell6GO.jpg","ressources/images/cell7GO.jpg","ressources/images/cell8GO.jpg","ressources/images/cellEmptyGO.jpg","app/entities/cellDataStructure.js","app/controllers/gridFactory.js","app/entities/Levels.js","app/components/CellView.js","app/components/GridView.js","app/components/LevelChoiceView.js","app/components/ResultView.js","app/components/TimerView.js","app/components/Contact.js","app/components/AppView.js","app/controllers/GameController.js","index.js"],"names":["getLinkedEmptyCells","grid","linkedEmptyCells","numberToSearch","count","lastLinkedEmptyCellIndex","length","i","cellIndexToSearch","getCellType","neighbors","getAllLegalNeighborIndex","newIndexToAdd","getAllEmptyCellsDirectlyConnected","push","neighbor","includes","computeEmptyCellNetwork","index","linkedEmptyCell","cellsToReveal","GridController","level","cells","this","size","forEach","cell","state","callback","legalNeighborsIndex","response","toXY","legalNeighbors","areCoordLegal","toIndex","newRevealedCellIndex","coordXY","x","y","Math","floor","type","display","cellHidden","cell1","cell2","cell3","cell4","cell5","cell6","cell7","cell8","cellFlag","wrongFlag","cellEmpty","bomb","bombGO","bombExplode","cellData","id","content","hiddenCell","flaggedCell","revealedCell","gameOver","interCellData","NaN","randomNumber","random","incrementConterCell","a","b","createTypeFromInterType","interCellType","interCellCount","gridFactory","difficulty","numberOfBomb","offset","min","max","randomIntFromInterval","getRandomOffset","computeNumberOfBomb","bombIndex","counterIndex","pushCell","randomIndex","randomCounterIndex","setCell","splice","ranIndex","randomBombIndex","adjustNumberOfBomb","putBomb","applyToAllLegalNeighbors","incrementCounterCells","getCell","setCells","createCellsFromInterCells","putAndCountBomb","levels","name","CellView","props","onRevealedCell","flagCell","onFlagCell","bind","mouseDownHandler","event","button","preventDefault","imgContent","toString","className","onMouseDown","onContextMenu","e","src","alt","React","Component","returnCallBack","callBack","rowOfCells","rowCount","tableData","cellCount","map","Grid","cellSpacing","rows","row","LevelChoiceView","levelChosen","onLevelChosen","currentTarget","onClick","ResultView","gameState","score","result","Fragment","bombFound","tick","remainingBomb","TimerView","Contact","href","AppView","chooseLevel","onNewRevealedCell","GridView","GameManager","gridManager","Levels","getData","newGrid","newGame","killTimer","setState","launchTimer","revealedCellIndex","cellIndexToReveal","getCellsToReveal","startGame","getCellState","setStateCell","bombHasBeenfound","endGameAndGetScore","youLoose","timer","setInterval","clearInterval","numberOfHiddenCell","youWin","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dde25fe8.chunk.js","sourcesContent":["function computeEmptyCellNetwork(grid, index){\r\n\r\n  let linkedEmptyCell=[]\r\n  let cellsToReveal=[]\r\n\r\n  linkedEmptyCell.push(index)\r\n  linkedEmptyCell= getLinkedEmptyCells(grid, linkedEmptyCell, 1)\r\n  \r\n  cellsToReveal.push(...linkedEmptyCell)\r\n\r\n  for (let i=1;i<linkedEmptyCell.length;i++){\r\n    cellsToReveal.push(...grid.getAllLegalNeighborIndex(linkedEmptyCell[i]))\r\n  }\r\n\r\n  return  cellsToReveal\r\n} \r\n\r\n\r\nfunction getLinkedEmptyCells(grid, linkedEmptyCells, numberToSearch){\r\n\r\n  let count=0\r\n  let lastLinkedEmptyCellIndex=linkedEmptyCells.length-1\r\n\r\n  for (let i=0;i<numberToSearch;i++){   \r\n    \r\n    let cellIndexToSearch=linkedEmptyCells[lastLinkedEmptyCellIndex-i]\r\n  \r\n    if (grid.getCellType(cellIndexToSearch)==='cellEmpty'){\r\n    \r\n      let neighbors=grid.getAllLegalNeighborIndex(cellIndexToSearch);\r\n\r\n      let newIndexToAdd= getAllEmptyCellsDirectlyConnected(grid, neighbors, linkedEmptyCells)\r\n      count= newIndexToAdd.length\r\n      linkedEmptyCells.push(...newIndexToAdd)     \r\n    }\r\n    linkedEmptyCells = getLinkedEmptyCells(grid, linkedEmptyCells, count)       \r\n  }   \r\n  return linkedEmptyCells\r\n}\r\n    \r\nfunction getAllEmptyCellsDirectlyConnected(grid, neighbors, linkedEmptyCells){ \r\n    let newIndexToAdd=[]\r\n\r\n    for (const neighbor of neighbors){\r\n      if (grid.getCellType(neighbor)==='cellEmpty'){ \r\n        if (linkedEmptyCells.includes(neighbor)===false){\r\n          newIndexToAdd.push(neighbor)\r\n        }\r\n      }\r\n    }\r\n      return newIndexToAdd\r\n}\r\n\r\nexport default computeEmptyCellNetwork","import computeEmptyCellNetwork from \"./computeEmptyCellNetwork\"\r\n\r\nclass GridController{\r\n    constructor(level, cells){\r\n        this.level=level\r\n        this.cells=cells\r\n    }\r\n\r\n    getData(){\r\n        return({\r\n            size: this.level.size,\r\n            cells:this.cells\r\n        })\r\n    }\r\n\r\n    numberOfHiddenCell(){\r\n        var count=0\r\n        this.cells.forEach(cell => {\r\n            if (cell.state==='hiddenCell'){\r\n                count++\r\n            }\r\n        });\r\n        return count\r\n    }\r\n\r\n    applyToAllCells(callback){\r\n        for (let i=0;i<this.size*this.size;i++){\r\n                this.cells[i]=callback(this.cells[i])\r\n        }\r\n    }\r\n\r\n    applyToAllLegalNeighbors(index, callback){\r\n        let legalNeighborsIndex=this.getAllLegalNeighborIndex(index)\r\n        \r\n        for(const index of legalNeighborsIndex){ this.cells[index]=callback(this.cells[index])}\r\n    }\r\n\r\n    applyToAllLegalNeighborsAndReturn(index, callback){\r\n        let legalNeighborsIndex=this.getAllLegalNeighborIndex(index)\r\n        const response=[]\r\n\r\n        for(const index of legalNeighborsIndex){ response.push(callback(this.cells[index]))}\r\n\r\n        return response\r\n    }\r\n\r\n    getAllLegalNeighborIndex(index){\r\n        const neighbors=this.neighbor(this.toXY(index)[0], this.toXY(index)[1]);\r\n        \r\n        let legalNeighbors=[]\r\n        for (let i=0;i<8;i++){\r\n            if (this.areCoordLegal(neighbors[i])){\r\n                legalNeighbors.push(this.toIndex(neighbors[i]))\r\n            }\r\n        }\r\n        return legalNeighbors\r\n    }\r\n\r\n    getCellsToReveal(newRevealedCellIndex){\r\n\r\n        let cellsToReveal=[]\r\n\r\n        if (this.getCellType(newRevealedCellIndex)==='cellEmpty'){\r\n            cellsToReveal=[...computeEmptyCellNetwork(this, newRevealedCellIndex)]\r\n        }\r\n        else{\r\n            cellsToReveal.push(newRevealedCellIndex)\r\n        }        \r\n        return  cellsToReveal\r\n    }\r\n    \r\n    areCoordLegal (coordXY){\r\n        let x=coordXY[0]\r\n        let y=coordXY[1]\r\n  \r\n       return (x<0 || x>=this.level.size || y<0 || y>=this.level.size) ? false : true\r\n    }\r\n\r\n    // give 8 neighbor cells of the XYCoord Cell\r\n    neighbor (x,y)\r\n    {\r\n        return [\r\n        [x+1,y],\r\n        [x+1,y+1],\r\n        [x+1,y-1],\r\n     \r\n        [x,y-1],          \r\n        [x,y+1], \r\n    \r\n        [x-1,y], \r\n        [x-1,y+1],\r\n        [x-1,y-1],\r\n        ]\r\n    }\r\n\r\n    toIndex(coordXY){\r\n        let x=coordXY[0]\r\n        let y=coordXY[1]\r\n    \r\n        const a=(y+x*this.level.size)\r\n        \r\n        return (a)\r\n    }\r\n    \r\n    toXY(index){\r\n        return [Math.floor(index/this.level.size), index%(this.level.size)]\r\n    } \r\n    \r\n    setCells(cells){\r\n        this.cells=cells\r\n    }\r\n\r\n    setCell(index, cell){\r\n        this.cells[index]=cell\r\n    }\r\n\r\n    pushCell(cell){\r\n        this.cells.push(cell)\r\n    }\r\n\r\n    getCell(index){\r\n        return this.cells[index]\r\n    }\r\n\r\n    getCellType(index){\r\n        return this.cells[index].type\r\n    }\r\n\r\n    getCellState(index){\r\n        return this.cells[index].state\r\n    }\r\n}\r\n\r\n\r\nexport default GridController\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/cellHidden.735eb5ef.jpg\";","export default __webpack_public_path__ + \"static/media/cell1.3b39df01.jpg\";","export default __webpack_public_path__ + \"static/media/cell2.23e1794f.jpg\";","export default __webpack_public_path__ + \"static/media/cell3.ca6e83e8.jpg\";","export default __webpack_public_path__ + \"static/media/cell4.f34ecc9b.jpg\";","export default __webpack_public_path__ + \"static/media/cell5.6e730bfb.jpg\";","export default __webpack_public_path__ + \"static/media/cell6.d10c5034.jpg\";","export default __webpack_public_path__ + \"static/media/cell7.9b4a9320.jpg\";","export default __webpack_public_path__ + \"static/media/cell8.b707e64e.jpg\";","export default __webpack_public_path__ + \"static/media/cellFlag.3f40a9aa.jpg\";","export default __webpack_public_path__ + \"static/media/wrongFlag.4c9f9798.jpg\";","export default __webpack_public_path__ + \"static/media/cellEmpty.6285a556.jpg\";","export default __webpack_public_path__ + \"static/media/bomb.426ba0e8.jpg\";","export default __webpack_public_path__ + \"static/media/bombGO.3acc3234.jpg\";","export default __webpack_public_path__ + \"static/media/bombExplode.d57098fe.jpg\";","import cellHidden from \"../../ressources/images/cellHidden.jpg\"\r\nimport cell1      from \"../../ressources/images/cell1.jpg\"\r\nimport cell2      from \"../../ressources/images/cell2.jpg\"\r\nimport cell3      from \"../../ressources/images/cell3.jpg\"\r\nimport cell4      from \"../../ressources/images/cell4.jpg\"\r\nimport cell5      from \"../../ressources/images/cell5.jpg\"\r\nimport cell6      from \"../../ressources/images/cell6.jpg\"\r\nimport cell7      from \"../../ressources/images/cell7.jpg\"\r\nimport cell8      from \"../../ressources/images/cell8.jpg\"\r\nimport cellFlag   from \"../../ressources/images/cellFlag.jpg\"\r\nimport wrongFlag   from \"../../ressources/images/wrongFlag.jpg\"\r\nimport cellEmpty  from \"../../ressources/images/cellEmpty.jpg\"\r\nimport bomb       from \"../../ressources/images/bomb.jpg\"\r\nimport bombGO       from \"../../ressources/images/bombGO.jpg\"\r\nimport bombExplode  from \"../../ressources/images/bombExplode.jpg\"\r\nimport bombFound  from \"../../ressources/images/bombFound.jpg\"\r\nimport cell1GO    from \"../../ressources/images/cell1GO.jpg\"\r\nimport cell2GO    from '../../ressources/images/cell2GO.jpg'\r\nimport cell3GO    from '../../ressources/images/cell3GO.jpg'\r\nimport cell4GO    from '../../ressources/images/cell4GO.jpg'\r\nimport cell5GO    from '../../ressources/images/cell5GO.jpg'\r\nimport cell6GO    from '../../ressources/images/cell6GO.jpg'\r\nimport cell7GO    from '../../ressources/images/cell7GO.jpg'\r\nimport cell8GO    from '../../ressources/images/cell8GO.jpg'\r\nimport cellEmptyGO from \"../../ressources/images/cellEmptyGO.jpg\"\r\n\r\nconst display = {\r\n  \"cellHidden\" : cellHidden,\r\n  'cell1' : cell1,\r\n  'cell2' :cell2,\r\n  'cell3' :cell3,\r\n  'cell4' :cell4,\r\n  'cell5' :cell5,\r\n  'cell6' :cell6,\r\n  'cell7' :cell7,\r\n  'cell8' :cell8,\r\n  \"cellFlag\" : cellFlag,\r\n  \"wrongFlag\" : wrongFlag,\r\n  \"cellEmpty\" : cellEmpty,\r\n  \"bomb\" : bomb,\r\n  'bombGO' : bombGO,\r\n  'bombFound' : bombFound,\r\n  'bombExplode' : bombExplode,\r\n  'cell1GO' : cell1GO,\r\n  'cell2GO' :cell2GO,\r\n  'cell3GO' :cell3GO,\r\n  'cell4GO' :cell4GO,\r\n  'cell5GO' :cell5GO,\r\n  'cell6GO' :cell6GO,\r\n  'cell7GO' :cell7GO,\r\n  'cell8GO' :cell8GO,\r\n  \"cellEmptyGO\" : cellEmptyGO,\r\n}\r\n\r\nexport default display","export default __webpack_public_path__ + \"static/media/bombFound.e30eeec9.jpg\";","export default __webpack_public_path__ + \"static/media/cell1GO.2e9a4ece.jpg\";","export default __webpack_public_path__ + \"static/media/cell2GO.e465500e.jpg\";","export default __webpack_public_path__ + \"static/media/cell3GO.6fb4c7b7.jpg\";","export default __webpack_public_path__ + \"static/media/cell4GO.37008616.jpg\";","export default __webpack_public_path__ + \"static/media/cell5GO.4ee670e2.jpg\";","export default __webpack_public_path__ + \"static/media/cell6GO.eaf7500d.jpg\";","export default __webpack_public_path__ + \"static/media/cell7GO.18591ca7.jpg\";","export default __webpack_public_path__ + \"static/media/cell8GO.53968326.jpg\";","export default __webpack_public_path__ + \"static/media/cellEmptyGO.6124dbf2.jpg\";","import display from './display';\r\n\r\nexport const cellData=(index, type)=>{\r\n\r\n    return({ \r\n    id : index,\r\n    type: type,\r\n    content : { hiddenCell : display['cellHidden'],\r\n                flaggedCell: display['cellFlag'],\r\n                revealedCell : display[type],\r\n                gameOver : display[type+'GO']\r\n              },\r\n    state : 'hiddenCell'\r\n    })      \r\n}\r\nexport const interCellData = (index,type)=>{\r\n  return({\r\n      index:index,\r\n      type:type,\r\n      count : (type==='bomb')? NaN:0\r\n  })\r\n}","import GridController from './GridController';\r\nimport {cellData}  from '../entities/cellDataStructure';\r\nimport {interCellData}  from '../entities/cellDataStructure';\r\n\r\n\r\nfunction gridFactory (level) {\r\n    let grid = new GridController(level, [])\r\n    putAndCountBomb(grid)\r\n\r\n    return grid\r\n}\r\n\r\n\r\nfunction putAndCountBomb(grid){\r\n    \r\n    putBomb(grid)\r\n    incrementCounterCells(grid)\r\n    createCellsFromInterCells(grid)\r\n}\r\n\r\nfunction putBomb(grid){\r\n    let difficulty=grid.level.difficulty\r\n    let size=grid.level.size\r\n\r\n    let numberOfBomb=computeNumberOfBomb(size, difficulty)\r\n    let index=0\r\n    let bombIndex=[]\r\n    let counterIndex=[]\r\n    \r\n    for (let y=0;y<size;y++){\r\n        for (let x=0;x<size;x++){   \r\n            if (randomNumber(index)< (difficulty)) {\r\n                grid.pushCell(interCellData(index,'bomb')); \r\n                bombIndex.push(index)\r\n            }\r\n            else{ \r\n                grid.pushCell(interCellData(index,'counter'))\r\n                counterIndex.push(index)\r\n            }\r\n            index++\r\n        }\r\n    }\r\n\r\n    adjustNumberOfBomb(numberOfBomb, bombIndex, counterIndex, grid)\r\n}\r\n\r\nfunction incrementCounterCells(grid){\r\n    for (const cell of grid.cells){\r\n        if (cell.type==='bomb'){\r\n            grid.applyToAllLegalNeighbors(cell.index, incrementConterCell);\r\n          } \r\n    }\r\n}\r\n\r\nfunction createCellsFromInterCells(grid){\r\n\r\n    let cells=[]\r\n    for (let i=0;i<grid.cells.length;i++){\r\n        let type=createTypeFromInterType(grid.getCellType(i),grid.getCell(i).count)\r\n        cells.push(cellData(grid.getCell(i).index,type))\r\n    }\r\n\r\n    grid.setCells(cells)\r\n}\r\n\r\n\r\nfunction min (a,b){\r\n    return (a<=b)?a:b\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n  }\r\n  \r\nfunction getRandomOffset(size, numberOfBomb){\r\n    let offset=1/(size*1.8)\r\n    return randomIntFromInterval(-offset*numberOfBomb,offset*numberOfBomb)\r\n}\r\n\r\nconst randomNumber=(index)=>{\r\n    return (Math.random()*100) \r\n}\r\n\r\n\r\nfunction computeNumberOfBomb(size, difficulty){\r\n    let numberOfBomb=Math.floor((size*size)*difficulty/100)\r\n    numberOfBomb=numberOfBomb+getRandomOffset(size, numberOfBomb)\r\n    return numberOfBomb\r\n}\r\n\r\nfunction adjustNumberOfBomb(numberOfBomb, bombIndex, counterIndex, grid){\r\n    if(bombIndex.length<numberOfBomb){\r\n        while(bombIndex.length!==numberOfBomb){\r\n            let randomIndex=Math.floor(Math.random() * counterIndex.length)\r\n            let randomCounterIndex=counterIndex[randomIndex]\r\n\r\n            bombIndex.push(randomCounterIndex)\r\n            grid.setCell(randomCounterIndex, interCellData(randomCounterIndex, 'bomb'))\r\n            counterIndex.splice(randomIndex,1)\r\n        }\r\n    }\r\n    else if(bombIndex.length>numberOfBomb){\r\n        while(bombIndex.length!==numberOfBomb){\r\n            let ranIndex=Math.floor(Math.random() * counterIndex.length)\r\n            let randomBombIndex=bombIndex[ranIndex]\r\n            counterIndex.push(randomBombIndex)\r\n            grid.setCell(randomBombIndex, interCellData(randomBombIndex, 'counter'))\r\n\r\n            bombIndex.splice(ranIndex,1)\r\n        }\r\n    }\r\n}\r\n\r\nfunction incrementConterCell(cell){\r\n    if (cell.type==='counter'){\r\n        let count=cell.count\r\n        count+=1\r\n        count = min(count,8)\r\n        cell.count=count\r\n        return cell\r\n    }\r\n    else{\r\n        return cell\r\n    }\r\n}\r\n\r\nfunction createTypeFromInterType(interCellType, interCellCount){\r\n    if (interCellType==='bomb'){\r\n        return 'bomb'}\r\n    else if (interCellCount===0){\r\n        return 'cellEmpty'}\r\n    else {\r\n        return 'cell'+interCellCount\r\n    }\r\n}\r\n\r\nexport default gridFactory","const levels = [\r\n    {\r\n        name:\"Easy\",\r\n        size:10,\r\n        difficulty : 11\r\n    },\r\n    {\r\n        name:\"Very hard\",\r\n        size:18,\r\n        difficulty : 13\r\n    },\r\n    {\r\n        name:\"impossible\",\r\n        size:22,\r\n        difficulty : 18\r\n    }\r\n]\r\n\r\nexport default levels","import React from 'react';\r\n\r\nexport default class CellView extends React.Component {\r\n\r\n      constructor(props){\r\n            super(props)\r\n \r\n            this.onRevealedCell=this.props.onRevealedCell\r\n            this.flagCell=this.props.flagCell\r\n\r\n            this.onFlagCell=this.onFlagCell.bind(this)\r\n            this.mouseDownHandler=this.mouseDownHandler.bind(this)  \r\n      }\r\n\r\n      onFlagCell(){\r\n            this.flagCell(this.id)\r\n      }\r\n\r\n      mouseDownHandler( event ) {\r\n            if( event.button ===0 ) {\r\n                  this.onRevealedCell(this.id, this.type);\r\n            }\r\n            if( event.button ===2 ) {\r\n                  event.preventDefault()\r\n                  this.flagCell(this.id)\r\n            }\r\n      }     \r\n \r\n      render(){  \r\n            \r\n            this.id=this.props.cellData.id\r\n            this.type=this.props.cellData.type\r\n            this.imgContent=this.props.cellData.content[this.props.cellData.state.toString()]\r\n            \r\n            return(\r\n            <div className=\"cellDiv\" onMouseDown={this.mouseDownHandler} onContextMenu={(e)=> e.preventDefault()}> \r\n                <img className=\"cellImg\" \r\n                     src={this.imgContent}\r\n                     alt={\"cell\" + this.type} />\r\n            </div>)\r\n      }\r\n}","import React from 'react';\r\nimport CellView from \"./CellView\"\r\n\r\nconst returnCallBack=(callBack)=>{\r\n    return callBack()\r\n}\r\n\r\nconst rowOfCells=(props)=>{\r\n    const rowCount = props.rowCount\r\n    const size = props.size\r\n    const tableData = props.cells\r\n    const onRevealedCell = props.onRevealedCell\r\n    const flagCell=props.flagCell\r\n\r\n    return (\r\n        returnCallBack( () => {\r\n                const cells=[]\r\n        \r\n                for (let cellCount=0; cellCount < size; cellCount++){\r\n                    cells.push(\r\n                        <td key={cellCount+rowCount* size}>\r\n                        \r\n                            <CellView  cellData= {tableData[cellCount+rowCount* size]}\r\n                                    onRevealedCell={(onRevealedCell)}\r\n                                    flagCell={flagCell}\r\n                            /></td>\r\n                        )\r\n                }   \r\n                return cells\r\n            }\r\n        ).map(rowOfCells=>rowOfCells)\r\n    )\r\n   \r\n}\r\n\r\nconst Grid =(props)=>{   \r\n    return(\r\n        <div className='gridDiv'>\r\n            <table id='gridTable' cellSpacing=\"0\">\r\n                {returnCallBack(()=> {\r\n                    var rows=[]\r\n                    for (let rowCount=0; rowCount <  props.size; rowCount++){\r\n                    \r\n                        rows.push(<tbody><tr key={rowCount}>\r\n                                {rowOfCells({...props, rowCount})}\r\n                            </tr></tbody>)\r\n                    }\r\n                    return rows\r\n                }\r\n                ).map(row=>row)}   \r\n            </table>\r\n        </div>)\r\n}\r\n\r\nexport default Grid\r\n\r\n    ","import React from 'react';\r\nimport levels from \"../entities/Levels\"\r\n\r\nexport default class LevelChoiceView extends React.Component {\r\n      constructor(props){\r\n            super(props)\r\n            this.levelChosen=props.levelChosen\r\n            this.onLevelChosen= this.onLevelChosen.bind(this)\r\n      }\r\n\r\n      onLevelChosen(event){\r\n        this.levelChosen(event.currentTarget.id)\r\n      }\r\n\r\n      render(){       \r\n            return(\r\n                  <div className=\"LevelChoice\">\r\n                  {\r\n                        levels.map((level,i)=>{return(<button id={i} onClick={this.onLevelChosen} key={i}>{level.name} </button>)})\r\n                  }\r\n                  </div>\r\n           )\r\n        }\r\n}","import React from 'react';\r\n\r\nconst ResultView=(props)=>{\r\n  let gameState=props.gameState\r\n  let content={}\r\n\r\n  if (gameState.state==='beforeGame'){\r\n    content= <h3>Ready?</h3>\r\n  }\r\n  else if (gameState.state==='isPlaying'){\r\n    content=<h3>Find them all !!! </h3>\r\n  }\r\n  else{\r\n    if (gameState.score.result==='You win'){\r\n      content= \r\n        <React.Fragment>\r\n        <h3> {gameState.score.result} !!! </h3>\r\n        You found all the {gameState.score.bombFound} bomb(s) in {gameState.score.tick} seconds ! Congratulation :)\r\n        </React.Fragment>\r\n    }\r\n    else{\r\n      content= \r\n      <React.Fragment>\r\n      <h3> {gameState.score.result} !!! </h3>\r\n           \r\n              <p>You found {gameState.score.bombFound} bomb(s)</p> \r\n              <p>There are {gameState.score.remainingBomb} bomb(s) unfound</p> \r\n              <p>There are {gameState.score.wrongFlag} wrong flag(s) </p> \r\n         \r\n      </React.Fragment>\r\n    }   \r\n  }\r\n  return(\r\n    <div className=\"resultDiv\">{content}</div>\r\n    \r\n  )\r\n}\r\nexport default ResultView","import React from 'react';\r\n\r\nconst TimerView = (props)=>{\r\n    let tick=props.tick\r\n    return (<div className='timerDiv'>\r\n      TIME : {tick}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default TimerView","const Contact=()=>{\r\n    return (<div className=\"contact\">\r\n        <p>Find the code here :</p>\r\n        <p> <a href=\"https://github.com/arthurlormeauwall/minesweeper\"> github/arthurlormeau/minesweeper </a> </p>\r\n        <p>Feel free to contact me : arthurlormeau@gmail.com</p>\r\n    </div>)\r\n}\r\n\r\nexport default Contact","import React from 'react';\r\nimport GridView from './GridView'\r\nimport LevelChoiceView from './LevelChoiceView';\r\nimport ResultView from './ResultView';\r\nimport TimerViews from './TimerView';\r\nimport Contact from './Contact'\r\n\r\nimport '../../scss/style.scss'\r\n\r\nconst AppView=(props)=>{\r\n  let chooseLevel=props.chooseLevel\r\n  let cells=props.cells\r\n  let size=props.size\r\n  let onNewRevealedCell=props.onRevealedCell\r\n  let flagCell=props.flagCell\r\n  let gameState=props.gameState\r\n  let tick=props.tick\r\n\r\n  return (<div id='AppDiv'>\r\n              <LevelChoiceView levelChosen={chooseLevel}/>\r\n              <TimerViews tick={tick}/>\r\n              <GridView cells={cells}\r\n                        size={size}\r\n                        onRevealedCell={onNewRevealedCell} \r\n                        flagCell={flagCell}\r\n              />\r\n              <ResultView gameState={gameState}/>\r\n              <Contact/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default  AppView\r\n","import React from 'react';\r\n\r\nimport gridFactory from './gridFactory'\r\nimport Levels from '../entities/Levels'\r\nimport AppView from '../components/AppView';\r\nimport display from '../entities/display';\r\n\r\n\r\n\r\nexport default class GameManager extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.gridManager = gridFactory(Levels[0])\r\n\r\n    this.gameState={state:'beforeGame'}\r\n    this.tick=0\r\n    this.state={grid : this.gridManager.getData(), gameState: this.gameState, tick:this.tick}\r\n  \r\n    this.newGrid=this.newGame.bind(this)\r\n    this.onNewRevealedCell=this.onNewRevealedCell.bind(this)\r\n    this.flagCell=this.flagCell.bind(this)\r\n    this.chooseLevel=this.chooseLevel.bind(this)\r\n  }\r\n\r\n  chooseLevel(content){\r\n    this.newGame(Levels[content])\r\n  }\r\n\r\n  newGame(level){\r\n    this.gridManager = gridFactory(level)\r\n    this.gameState={state: 'beforeGame'}\r\n    this.killTimer()\r\n    this.tick=0\r\n    this.setState({grid:this.gridManager.getData(), gameState:this.gameState, tick:this.tick})\r\n  }\r\n\r\n  startGame(){\r\n    this.gameState.state= 'isPlaying'\r\n    this.launchTimer()\r\n  }\r\n\r\n  onNewRevealedCell(revealedCellIndex, type){\r\n    let cellIndexToReveal=this.gridManager.getCellsToReveal(revealedCellIndex)\r\n\r\n    if (this.gameState.state==='beforeGame'){\r\n      this.startGame()\r\n    }\r\n\r\n    if (this.getCellState(revealedCellIndex)!=='flaggedCell'){\r\n      cellIndexToReveal.forEach(index=>{\r\n        if(this.getCellState(index)==='hiddenCell'){\r\n          this.setStateCell(index, 'revealedCell')       \r\n        } \r\n      })\r\n      if(type==='bomb'){\r\n        this.bombHasBeenfound(revealedCellIndex)\r\n      } \r\n    }  \r\n  }\r\n\r\n  bombHasBeenfound(index){\r\n    this.gameState.score= this.endGameAndGetScore()\r\n    \r\n    this.gridManager.cells[index].content.gameOver=display['bombExplode']\r\n    this.youLoose()\r\n  }\r\n\r\n  flagCell(index){\r\n      if (this.getCellState(index)==='flaggedCell'){\r\n        this.setStateCell(index, 'hiddenCell')\r\n      }\r\n      else if (this.getCellState(index)==='hiddenCell'){\r\n        this.setStateCell(index, 'flaggedCell')\r\n      }\r\n  }\r\n\r\n  launchTimer(){\r\n    this.timer=setInterval(()=>{\r\n                this.tick++\r\n                this.setState({grid:this.gridManager.getData(), gameState:this.gameState, tick:this.tick})},\r\n                1000)\r\n  }\r\n\r\n  killTimer(){\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  setStateCell(index,state){\r\n    this.gridManager.cells[index].state=state\r\n    \r\n    this.setState({grid:this.gridManager.getData(), gameState:this.gameState})\r\n\r\n    if (this.gridManager.numberOfHiddenCell()===0){\r\n      this.gameState.score=this.endGameAndGetScore()\r\n      if (this.gameState.score.remainingBomb!==0 || this.gameState.score.wrongFlag !==0){\r\n        this.youLoose()\r\n      }\r\n      else{\r\n        this.youWin()\r\n      }\r\n    }\r\n  }\r\n\r\n  youWin(){\r\n    this.killTimer()\r\n    this.gameState.score.result='You win'\r\n    this.setState(({grid : this.gridManager.getData(), gameState : this.gameState}))\r\n  }\r\n\r\n  youLoose(){\r\n    this.killTimer()\r\n    this.gameState.score.result='You loose'\r\n    this.setState(({grid : this.gridManager.getData(), gameState : this.gameState}))\r\n  }\r\n\r\n  endGameAndGetScore(index){\r\n    this.gameState.state='gameOver'\r\n    let wrongFlag=0\r\n    let bombFound=0\r\n    let remainingBomb=0\r\n    \r\n      this.gridManager.cells.forEach(cell => {\r\n            if(cell.state==='flaggedCell'){\r\n              if(cell.type==='bomb'){\r\n                cell.state='gameOver'\r\n                cell.content.gameOver=display['bombFound']\r\n                bombFound++\r\n              }\r\n              else{\r\n                cell.state='gameOver'\r\n                cell.content.gameOver=display['wrongFlag']\r\n                wrongFlag++\r\n              }\r\n            }\r\n            else{\r\n              cell.state='gameOver'\r\n              if (cell.type==='bomb'){\r\n                remainingBomb++\r\n              }\r\n            }\r\n     });\r\n     return ({\r\n       wrongFlag:wrongFlag,\r\n       bombFound:bombFound,\r\n       remainingBomb:remainingBomb,\r\n       tick:this.tick\r\n     })\r\n  }\r\n\r\n  getCellState(index){\r\n    return this.gridManager.getCellState(index)\r\n  }\r\n\r\n  render(){\r\n      return (<AppView\r\n                    onRevealedCell={this.onNewRevealedCell} \r\n                    flagCell={this.flagCell}\r\n                    chooseLevel={this.chooseLevel}\r\n                    tick={this.state.tick}\r\n                    cells={this.state.grid.cells}\r\n                    size={this.state.grid.size}\r\n                    gameState={this.state.gameState}   \r\n                  />\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport GameController from './app/controllers/GameController';\r\n\r\n\r\nReactDOM.render(\r\n    <GameController/>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}